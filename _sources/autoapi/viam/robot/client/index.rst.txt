:py:mod:`viam.robot.client`
===========================

.. py:module:: viam.robot.client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.robot.client.RobotClient




Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.robot.client.LOGGER


.. py:data:: LOGGER
   

   

.. py:class:: RobotClient

   gRPC client for a Robot. This class should be used for all interactions with a robot.

   There are 2 ways to instantiate a robot client:

       RobotClient.at_address(...)

       RobotClient.with_channel(...)

   You can use the client standalone or within a context

       robot = await RobotClient.at_address(...)

       async with await RobotClient.with_channel(...) as robot: ...

   You must `close()` the robot to release resources.

   Note: Robots used within a context are automatically closed UNLESS created with a channel. Robots created using `with_channel` are
   not automatically closed.

   .. py:class:: Options

      .. py:attribute:: refresh_interval
         :annotation: :int = 0

         How often to refresh the status/parts of the robot in seconds.
         If not set, the robot will not be refreshed automatically

      .. py:attribute:: dial_options
         :annotation: :Optional[viam.rpc.dial.DialOptions]

         Options used to connect clients to gRPC servers

      .. py:attribute:: log_level
         :annotation: :int

         The log level to output


   .. py:method:: at_address(cls, address: str, options: Options) -> typing_extensions.Self
      :classmethod:
      :async:

      Create a robot client that is connected to the robot at the provided address.

      :param address: Address of the robot (IP address, URL, etc.)
      :type address: str
      :param options: Options for connecting and refreshing
      :type options: Options

      :returns: the RobotClient
      :rtype: Self


   .. py:method:: with_channel(cls, channel: grpclib.client.Channel, options: Options) -> typing_extensions.Self
      :classmethod:
      :async:

      Create a robot that is connected to a robot over the given channel.

      Any robots created using this method will *NOT* automatically close the channel upon exit.

      :param channel: The gRPC channel that is connected to a robot
      :type channel: Channel
      :param options: Options for refreshing. Any connection options will be ignored.
      :type options: Options

      :returns: the RobotClient
      :rtype: Self


   .. py:method:: refresh(self)
      :async:

      Manually refresh the underlying parts of this robot


   .. py:method:: get_component(self, name: viam.proto.api.common.ResourceName) -> viam.components.component_base.ComponentBase

      Get a component using its ResourceName.

      This function should not be used except in specific cases. The method `Component.from_robot(...)` is the preferred method
      for obtaining components.

          `arm = Arm.from_robot(robot=robot, name='my_arm')`

      Because this function returns a generic `ComponentBase` rather than the specific
      component type, it will be necessary to cast the returned component to the desired component. This can be done using a few
      different methods:

      - Assertion

          arm = robot.get_component(Arm.get_resource_name('my_arm'))

          assert isinstance(arm, Arm)

          end_pos = await arm.get_end_position()


      - Explicit cast

          from typing import cast


          arm = robot.get_component(Arm.get_resource_name('my_arm'))

          arm = cast(Arm, arm)

          end_pos = await arm.get_end_position()


      - Declare type on variable assignment.
        - Note: If using an IDE, a type error may be shown which can be ignored.

          arm: Arm = robot.get_component(Arm.get_resource_name('my_arm'))  # type: ignore

          end_pos = await arm.get_end_position()


      :param name: The component's name
      :type name: ResourceName

      :raises ViamError: Raised if the requested resource is not a component
      :raises ComponentNotFoundError: Error if component with the given type and name does not exist in the registry

      :returns: The component
      :rtype: ComponentBase


   .. py:method:: get_service(self, service_type: viam.services.ServiceType[viam.services.types.Service]) -> viam.services.types.Service

      Get a service by specifying the `ServiceType`.

      :param service_type: The service type
      :type service_type: ServiceType

      :raises ServiceNotImplementedError: Raised the service is not implemented or available on the Robot

      :returns: The service
      :rtype: Service


   .. py:method:: resource_names(self) -> List[viam.proto.api.common.ResourceName]
      :property:

      Get a list of all resource names

      :returns: The list of resource names
      :rtype: List[ResourceName]


   .. py:method:: close(self)
      :async:

      Cleanly close the underlying connections and stop any periodic tasks


   .. py:method:: __aenter__(self)
      :async:


   .. py:method:: __aexit__(self, exc_type, exc_value, traceback)
      :async:


   .. py:method:: get_status(self, components: Optional[List[viam.proto.api.common.ResourceName]] = None)
      :async:

      Get the status of the robot's components. You can optionally
      provide a list of `ResourceName` for which you want statuses.

      :param components: Optional list of
                         `ResourceName` for components you want statuses.
      :type components: Optional[List[ResourceName]]


   .. py:method:: get_frame_system_config(self, additional_transforms: Optional[List[viam.proto.api.common.Transform]] = None) -> List[viam.proto.api.robot.FrameSystemConfig]
      :async:

      Get the configuration of the frame system of a given robot.

      Returns (Config): The configuration of a given robot's frame system.


   .. py:method:: transform_pose(self, query: viam.proto.api.common.PoseInFrame, destination: str, additional_transforms: Optional[List[viam.proto.api.common.Transform]] = None) -> viam.proto.api.common.PoseInFrame
      :async:

      Transform a given source Pose from the reference frame to a new specified destination which is a reference frame.

      :param query: The pose that should be transformed.
      :type query: Pose
      :param destination: The name of the reference frame to transform the given pose to.
      :type destination: str


   .. py:method:: discover_components(self, queries: List[viam.proto.api.robot.DiscoveryQuery]) -> List[viam.proto.api.robot.Discovery]
      :async:

      Get the list of discovered component configurations.

      :param queries: The list of component models to lookup configurations for.
      :type queries: List[DiscoveryQuery]



