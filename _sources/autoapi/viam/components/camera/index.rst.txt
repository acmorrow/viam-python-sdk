:py:mod:`viam.components.camera`
================================

.. py:module:: viam.components.camera


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   camera/index.rst
   client/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.camera.Camera
   viam.components.camera.DistortionParameters
   viam.components.camera.IntrinsicParameters
   viam.components.camera.RawImage




.. py:class:: Camera(name: str)



   Camera represents any physical hardware that can capture frames.

   This acts as an abstract base class for any drivers representing specific
   camera implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   .. py:class:: Properties



      The camera's supported features and settings

      .. py:attribute:: supports_pcd
         :annotation: :bool

         Whether the camera has a valid implementation of ``get_point_cloud``

      .. py:attribute:: intrinsic_parameters
         :annotation: :viam.proto.component.camera.IntrinsicParameters

         The properties of the camera

      .. py:attribute:: distortion_parameters
         :annotation: :viam.proto.component.camera.DistortionParameters

         The distortion parameters of the camera


   .. py:method:: get_image(mime_type: str = CameraMimeType.PNG, *, timeout: Optional[float] = None, **kwargs) -> Union[PIL.Image.Image, viam.media.video.RawImage]
      :abstractmethod:
      :async:

      Get the next image from the camera as an Image or RawImage.
      Be sure to close the image when finished.

      :param mime_type: The desired mime type of the image. This does not guarantee output type
      :type mime_type: str

      :returns: The frame
      :rtype: Image | RawImage


   .. py:method:: get_point_cloud(*, timeout: Optional[float] = None, **kwargs) -> Tuple[bytes, str]
      :abstractmethod:
      :async:

      Get the next point cloud from the camera. This will be
      returned as bytes with a mimetype describing
      the structure of the data. The consumer of this call
      should encode the bytes into the formatted suggested
      by the mimetype.

      :returns: The pointcloud data.
                str: The mimetype of the pointcloud (e.g. PCD).
      :rtype: bytes


   .. py:method:: get_properties(*, timeout: Optional[float] = None, **kwargs) -> Properties
      :abstractmethod:
      :async:

      Get the camera intrinsic parameters and camera distortion parameters

      :returns: The properties of the camera
      :rtype: Properties



.. py:class:: DistortionParameters(*, model: str = ..., parameters: collections.abc.Iterable[builtins.float] | None = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:property:: parameters
      :type: google.protobuf.internal.containers.RepeatedScalarFieldContainer[float]


   .. py:attribute:: model
      :annotation: :str

      


.. py:class:: IntrinsicParameters(*, width_px: int = ..., height_px: int = ..., focal_x_px: float = ..., focal_y_px: float = ..., center_x_px: float = ..., center_y_px: float = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:attribute:: width_px
      :annotation: :int

      

   .. py:attribute:: height_px
      :annotation: :int

      

   .. py:attribute:: focal_x_px
      :annotation: :float

      

   .. py:attribute:: focal_y_px
      :annotation: :float

      

   .. py:attribute:: center_x_px
      :annotation: :float

      

   .. py:attribute:: center_y_px
      :annotation: :float

      


.. py:class:: RawImage



   A raw bytes representation of an image.

   A RawImage should be returned instead of a PIL Image instance under one of
   the following conditions

   1) The requested mime type has the LAZY_SUFFIX string appended to it
   2) The requested mime type is not supported for decoding/encoding by Viam's
   Python SDK

   .. py:attribute:: data
      :annotation: :bytes

      The raw data of the image

   .. py:attribute:: mime_type
      :annotation: :str

      The mimetype of the image

   .. py:method:: close()

      Close the image and release resources. For RawImage, this is a noop.



