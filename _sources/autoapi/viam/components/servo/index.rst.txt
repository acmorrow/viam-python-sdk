:py:mod:`viam.components.servo`
===============================

.. py:module:: viam.components.servo


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   client/index.rst
   service/index.rst
   servo/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.servo.Servo




.. py:class:: Servo(name: str)



   Servo represents a physical servo.

   This acts as an abstract base class for any drivers representing specific
   servo implementations. This cannot be used on its own. If the ``__init__()`` function is
   overridden, it must call the ``super().__init__()`` function.

   .. py:attribute:: name
      :annotation: :str

      

   .. py:method:: move(angle: int, *, extra: Optional[Mapping[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:
      :async:

      Move the servo to the provided angle.

      :param angle: The desired angle of the servo in degrees.
      :type angle: int


   .. py:method:: get_position(*, extra: Optional[Mapping[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> int
      :abstractmethod:
      :async:

      Get the current angle (degrees) of the servo.

      :returns: The current angle of the servo in degrees.
      :rtype: int


   .. py:method:: stop(*, extra: Optional[Mapping[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :abstractmethod:
      :async:

      Stop the servo. It is assumed that the servo stops immediately.


   .. py:method:: is_moving() -> bool
      :abstractmethod:
      :async:

      Get if the servo is currently moving.

      :returns: Whether the servo is moving.
      :rtype: bool



