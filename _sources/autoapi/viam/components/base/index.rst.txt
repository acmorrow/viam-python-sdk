:py:mod:`viam.components.base`
==============================

.. py:module:: viam.components.base


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   client/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.base.Base
   viam.components.base.Vector3




.. py:class:: Base(name: str)



   Base represents a physical base of a robot.

   This acts as an abstract base class for any drivers representing specific
   base implementations. This cannot be used on its own. If the `__init__()` function is
   overriden, it must call the `super().__init__()` function.

   .. py:method:: move_straight(distance: int, velocity: float, extra: Optional[Dict[str, Any]] = None)
      :abstractmethod:
      :async:

      Move the base in a straight line the given `distance`, expressed in millimeters,
      at the given `velocity`, expressed in millimeters per second.
      When `distance` or `velocity` is 0, the base will stop.
      This method blocks until completed or cancelled.

      :param distance: The distance (in millimeters) to move.
                       Negative implies backwards.
      :type distance: int
      :param velocity: The velocity (in millimeters per second) to move.
                       Negative implies backwards.
      :type velocity: float


   .. py:method:: spin(angle: float, velocity: float, extra: Optional[Dict[str, Any]] = None)
      :abstractmethod:
      :async:

      Spin the base in place `angle` degrees, at the given angular `velocity`,
      expressed in degrees per second.
      When `velocity` is 0, the base will stop.
      This method blocks until completed or cancelled.

      :param angle: The angle (in degrees) to spin.
                    Negative implies backwards.
      :type angle: float
      :param velocity: The angular velocity (in degrees per second).
                       to spin. Negative implies backwards.
      :type velocity: float


   .. py:method:: set_power(linear: viam.proto.common.Vector3, angular: viam.proto.common.Vector3, extra: Optional[Dict[str, Any]] = None)
      :abstractmethod:
      :async:

      Set the linear and angular velocity of the Base
      When `linear` is 0, the the base will spin.
      When `angular` is 0, the the base will move in a straight line.
      When both `linear` and `angular` are 0, the base will stop.
      When `linear` and `angular` are both nonzero, the base will move in an arc,
      with a tighter radius if angular power is greater than linear power.

      :param linear: The linear component. Only the Y component is used
                     for wheeled base. Negative implies backwards.
      :type linear: Vector3
      :param angular: The angular component. Only the Z component is used
                      for wheeled base. Positive turns left; negative turns right.
      :type angular: Vector3


   .. py:method:: set_velocity(linear: viam.proto.common.Vector3, angular: viam.proto.common.Vector3, extra: Optional[Dict[str, Any]] = None)
      :abstractmethod:
      :async:

      Set the linear and angular velocities of the base.


      :param linear: Velocity in mm/sec
      :type linear: Vector3
      :param angular: Velocity in deg/sec
      :type angular: Vector3


   .. py:method:: stop(extra: Optional[Dict[str, Any]] = None)
      :abstractmethod:
      :async:

      Stop the base.


   .. py:method:: is_moving() -> bool
      :async:

      Get if the base is currently moving.

      :returns: Whether the base is moving.
      :rtype: bool



.. py:class:: Vector3(*, x: float = ..., y: float = ..., z: float = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:attribute:: x
      :annotation: :float

      

   .. py:attribute:: y
      :annotation: :float

      

   .. py:attribute:: z
      :annotation: :float

      


