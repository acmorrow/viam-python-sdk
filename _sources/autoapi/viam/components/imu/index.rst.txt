:py:mod:`viam.components.imu`
=============================

.. py:module:: viam.components.imu


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   client/index.rst
   imu/index.rst
   service/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.imu.IMUClient
   viam.components.imu.IMU
   viam.components.imu.Acceleration
   viam.components.imu.AngularVelocity
   viam.components.imu.EulerAngles
   viam.components.imu.Magnetometer
   viam.components.imu.Orientation




.. py:class:: IMUClient(name: str, channel: grpclib.client.Channel)



   gRPC client for the IMU component.

   .. py:method:: read_acceleration(self) -> viam.components.imu.imu.Acceleration
      :async:

      Return the acceleration of the IMU.

      :returns: Acceleration


   .. py:method:: read_angular_velocity(self) -> viam.components.imu.imu.AngularVelocity
      :async:

      Return the angular velocity of the IMU.

      :returns: AngularVelocity, in degrees per second.


   .. py:method:: read_orientation(self) -> viam.components.imu.imu.Orientation
      :async:

      Return the orientation of the IMU.

      :returns: Orientation, represented in EulerAngles.


   .. py:method:: read_magnetometer(self) -> viam.components.imu.imu.Magnetometer
      :async:

      Return the most recent reading from the magnetometer of the IMU.

      :returns: Magnetometer


   .. py:method:: do(self, command: Dict[str, Any]) -> Dict[str, Any]
      :async:

      Send/Receive arbitrary commands

      :param command: The command to execute
      :type command: Dict[str, Any]

      :raises NotImplementedError: Raised if the component does not support arbitrary commands

      :returns: Result of the executed command
      :rtype: Dict[str, Any]



.. py:class:: IMU(name: str)



   IMU represents a physical IMU (inertial measurement unit).

   This acts as an abstract base class for any drivers representing specific
   IMU implementations. This cannot be used on its own. If the `__init__()` function is
   overriden, it must call the `super().__init__()` function.

   .. py:method:: read_angular_velocity(self) -> viam.proto.api.component.imu.AngularVelocity
      :abstractmethod:
      :async:

      Return the angular velocity of the IMU.

      :returns: AngularVelocity, in degrees per second.


   .. py:method:: read_orientation(self) -> Orientation
      :abstractmethod:
      :async:

      Return the orientation of the IMU.

      :returns: Orientation, represented in EulerAngles.


   .. py:method:: read_acceleration(self) -> viam.proto.api.component.imu.Acceleration
      :abstractmethod:
      :async:

      Return the acceleration of the IMU.

      :returns: Acceleration


   .. py:method:: read_magnetometer(self) -> viam.proto.api.component.imu.Magnetometer
      :abstractmethod:
      :async:

      Return the most recent reading from the magnetometer of the IMU.

      :returns: Magnetometer



.. py:class:: Acceleration(*, x_mm_per_sec_per_sec: float = ..., y_mm_per_sec_per_sec: float = ..., z_mm_per_sec_per_sec: float = ...)



   Acceleration contains linear acceleration in mm/s^2 across x/y/z axes.

   .. py:attribute:: x_mm_per_sec_per_sec
      :annotation: :float

      Acceleration in mm/s^2 across the x-axis

   .. py:attribute:: y_mm_per_sec_per_sec
      :annotation: :float

      Acceleration in mm/s^2 across the y-axis

   .. py:attribute:: z_mm_per_sec_per_sec
      :annotation: :float

      Acceleration in mm/s^2 across the z-axis


.. py:class:: AngularVelocity(*, x_degs_per_sec: float = ..., y_degs_per_sec: float = ..., z_degs_per_sec: float = ...)



   AngularVelocity contains angular velocity in deg/s across x/y/z axes.

   .. py:attribute:: x_degs_per_sec
      :annotation: :float

      Velocity in deg/s across the x-axis

   .. py:attribute:: y_degs_per_sec
      :annotation: :float

      Velocity in deg/s across the y-axis

   .. py:attribute:: z_degs_per_sec
      :annotation: :float

      Velocity in deg/s across the z-axis


.. py:class:: EulerAngles(*, roll_deg: float = ..., pitch_deg: float = ..., yaw_deg: float = ...)



   EulerAngles are three angles used to represent the rotation of an object in 3D Euclidean space
   The Tait–Bryan angle formalism is used, with rotations around three distinct axes in the z-y′-x″ sequence.

   .. py:attribute:: roll_deg
      :annotation: :float

      Rotation in deg around the x-axis

   .. py:attribute:: pitch_deg
      :annotation: :float

      Rotation in deg around the y-axis

   .. py:attribute:: yaw_deg
      :annotation: :float

      Rotation in deg around the z-axis


.. py:class:: Magnetometer(*, x_gauss: float = ..., y_gauss: float = ..., z_gauss: float = ...)



   Magnetometer contains magnetic field readings in gauss x/y/z axes.

   .. py:attribute:: x_gauss
      :annotation: :float

      Magnetometer in gauss across the x-axis

   .. py:attribute:: y_gauss
      :annotation: :float

      Magnetometer in gauss across the y-axis

   .. py:attribute:: z_gauss
      :annotation: :float

      Magnetometer in gauss across the z-axis


.. py:class:: Orientation

   An object used to express the different parameterizations
   of the orientation of a rigid object or a frame of
   reference in 3D Euclidean space.

   .. py:attribute:: euler_angles
      :annotation: :viam.proto.api.component.imu.EulerAngles

      


