:py:mod:`viam.components.input.input`
=====================================

.. py:module:: viam.components.input.input


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.components.input.input.EventType
   viam.components.input.input.Control
   viam.components.input.input.Event
   viam.components.input.input.Controller




Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.components.input.input.ControlFunction


.. py:class:: EventType



   Represents the type of input event.

   .. py:attribute:: ALL_EVENTS
      :annotation: = AllEvents

      Callbacks registered for this event will be called in ADDITION to other registered event callbacks.

   .. py:attribute:: CONNECT
      :annotation: = Connect

      Sent at controller initialization, and on reconnects.

   .. py:attribute:: DISCONNECT
      :annotation: = Disconnect

      If unplugged, or wireless/network times out.

   .. py:attribute:: BUTTON_PRESS
      :annotation: = ButtonPress

      Typical key press.

   .. py:attribute:: BUTTON_RELEASE
      :annotation: = ButtonRelease

      Key release.

   .. py:attribute:: BUTTON_HOLD
      :annotation: = ButtonHold

      Key is held down. This wil likely be a repeated event.

   .. py:attribute:: BUTTON_CHANGE
      :annotation: = ButtonChange

      Both up and down for convenience during registration, not typically emitted.

   .. py:attribute:: POSITION_CHANGE_ABSOLUTE
      :annotation: = PositionChangeAbs

      Absolute position is reported via Value, a la joysticks.

   .. py:attribute:: POSITION_CHANGE_RELATIVE
      :annotation: = PositionChangeRel

      Relative position is reported via Value, a la mice, or simulating axes with up/down buttons.


.. py:class:: Control



   Control identifies the input (specific Axis or Button) of a controller.

   .. py:attribute:: ABSOLUTE_X
      :annotation: = AbsoluteX

      

   .. py:attribute:: ABSOLUTE_Y
      :annotation: = AbsoluteY

      

   .. py:attribute:: ABSOLUTE_Z
      :annotation: = AbsoluteZ

      

   .. py:attribute:: ABSOLUTE_RX
      :annotation: = AbsoluteRX

      

   .. py:attribute:: ABSOLUTE_RY
      :annotation: = AbsoluteRY

      

   .. py:attribute:: ABSOLUTE_RZ
      :annotation: = AbsoluteRZ

      

   .. py:attribute:: ABSOLUTE_HAT0_X
      :annotation: = AbsoluteHat0X

      

   .. py:attribute:: ABSOLUTE_HAT0_Y
      :annotation: = AbsoluteHat0Y

      

   .. py:attribute:: BUTTON_SOUTH
      :annotation: = ButtonSouth

      

   .. py:attribute:: BUTTON_EAST
      :annotation: = ButtonEast

      

   .. py:attribute:: BUTTON_WEST
      :annotation: = ButtonWest

      

   .. py:attribute:: BUTTON_NORTH
      :annotation: = ButtonNorth

      

   .. py:attribute:: BUTTON_LT
      :annotation: = ButtonLT

      

   .. py:attribute:: BUTTON_RT
      :annotation: = ButtonRT

      

   .. py:attribute:: BUTTON_LT2
      :annotation: = ButtonLT2

      

   .. py:attribute:: BUTTON_RT2
      :annotation: = ButtonRT2

      

   .. py:attribute:: BUTTON_L_THUMB
      :annotation: = ButtonLThumb

      

   .. py:attribute:: BUTTON_R_THUMB
      :annotation: = ButtonRThumb

      

   .. py:attribute:: BUTTON_SELECT
      :annotation: = ButtonSelect

      

   .. py:attribute:: BUTTON_START
      :annotation: = ButtonStart

      

   .. py:attribute:: BUTTON_MENU
      :annotation: = ButtonMenu

      

   .. py:attribute:: BUTTON_RECORD
      :annotation: = ButtonRecord

      

   .. py:attribute:: BUTTON_E_STOP
      :annotation: = ButtonEStop

      

   .. py:attribute:: ABSOLUTE_PEDAL_ACCELERATOR
      :annotation: = AbsolutePedalAccelerator

      

   .. py:attribute:: ABSOLUTE_PEDAL_BRAKE
      :annotation: = AbsolutePedalBrake

      

   .. py:attribute:: ABSOLUTE_PEDAL_CLUTCH
      :annotation: = AbsolutePedalClutch

      


.. py:class:: Event

   .. py:attribute:: time
      :annotation: :float

      seconds since epoch

   .. py:attribute:: event
      :annotation: :EventType

      

   .. py:attribute:: control
      :annotation: :Control

      

   .. py:attribute:: value
      :annotation: :float

      0 or 1 for buttons, -1.0 to +1.0 for axes

   .. py:method:: proto()
      :property:


   .. py:method:: from_proto(proto: viam.proto.component.inputcontroller.Event) -> typing_extensions.Self
      :classmethod:



.. py:data:: ControlFunction
   

   

.. py:class:: Controller(name: str)



   Controller is a logical "container" more than an actual device
   Could be a single gamepad, or a collection of digitalInterrupts
   and analogReaders, a keyboard, etc.

   .. py:method:: get_controls(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> List[Control]
      :abstractmethod:
      :async:

      Returns a list of Controls provided by the Controller

      :returns: List of controls provided by the Controller
      :rtype: List[Control]


   .. py:method:: get_events(*, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs) -> Dict[Control, Event]
      :abstractmethod:
      :async:

      Returns the most recent Event for each input
      (which should be the current state)

      :returns: The most recent event for each input
      :rtype: Dict[Control, Event]


   .. py:method:: register_control_callback(control: Control, triggers: List[EventType], function: Optional[ControlFunction], *, extra: Optional[Dict[str, Any]] = None, **kwargs)
      :abstractmethod:

      Register a function that will fire on given EventTypes for a given
      Control

      :param control: The control to register the function for
      :type control: Control
      :param triggers: The events that will
                       trigger the function
      :type triggers: List[EventType]
      :param function: The function to run on
                       specific triggers
      :type function: ControlFunction


   .. py:method:: trigger_event(event: Event, *, extra: Optional[Dict[str, Any]] = None, timeout: Optional[float] = None, **kwargs)
      :async:

      Directly send an Event (such as a button press) from external code

      :param event: The event to trigger
      :type event: Event



