:py:mod:`viam.utils`
====================

.. py:module:: viam.utils


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.utils.PointerCounter



Functions
~~~~~~~~~

.. autoapisummary::

   viam.utils.primitive_to_value
   viam.utils.value_to_primitive
   viam.utils.resource_names_for_component
   viam.utils.message_to_struct
   viam.utils.struct_to_message
   viam.utils.dict_to_struct
   viam.utils.struct_to_dict
   viam.utils.sensor_readings_native_to_value
   viam.utils.sensor_readings_value_to_native



Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.utils.T


.. py:function:: primitive_to_value(v: Any) -> google.protobuf.struct_pb2.Value

   Create a new google.protobuf.struct_pb2.Value
   Supports primitive types of
   - None
   - Number
   - Bool
   - String
   - Dict
   - List
   - Bytes

   :param v: object to convert to a Value
   :type v: Any

   :raises TypeError: If the object cannot be converted

   :returns: a protobuf Value instance of the object
   :rtype: Value


.. py:function:: value_to_primitive(value: google.protobuf.struct_pb2.Value) -> Any


.. py:function:: resource_names_for_component(component: viam.components.component_base.ComponentBase) -> List[viam.proto.common.ResourceName]


.. py:function:: message_to_struct(message: google.protobuf.message.Message) -> google.protobuf.struct_pb2.Struct


.. py:data:: T
   

   

.. py:function:: struct_to_message(struct: google.protobuf.struct_pb2.Struct, message_type: Type[T]) -> T


.. py:function:: dict_to_struct(obj: Mapping[str, Any]) -> google.protobuf.struct_pb2.Struct


.. py:function:: struct_to_dict(struct: google.protobuf.struct_pb2.Struct) -> Dict[str, Any]


.. py:function:: sensor_readings_native_to_value(readings: Mapping[str, Any]) -> Mapping[str, Any]


.. py:function:: sensor_readings_value_to_native(readings: Mapping[str, google.protobuf.struct_pb2.Value]) -> Mapping[str, Any]


.. py:class:: PointerCounter

   .. py:method:: increment() -> int


   .. py:method:: decrement() -> int


   .. py:method:: wait() -> None
      :async:


   .. py:method:: count() -> int
      :property:



