:py:mod:`viam.proto.rpc.webrtc.signaling`
=========================================

.. py:module:: viam.proto.rpc.webrtc.signaling

.. autoapi-nested-parse::

   @generated by Viam.
   Do not edit manually!



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.proto.rpc.webrtc.signaling.SignalingServiceBase
   viam.proto.rpc.webrtc.signaling.SignalingServiceStub
   viam.proto.rpc.webrtc.signaling.AnswerRequest
   viam.proto.rpc.webrtc.signaling.AnswerRequestDoneStage
   viam.proto.rpc.webrtc.signaling.AnswerRequestErrorStage
   viam.proto.rpc.webrtc.signaling.AnswerRequestInitStage
   viam.proto.rpc.webrtc.signaling.AnswerRequestUpdateStage
   viam.proto.rpc.webrtc.signaling.AnswerResponse
   viam.proto.rpc.webrtc.signaling.AnswerResponseDoneStage
   viam.proto.rpc.webrtc.signaling.AnswerResponseErrorStage
   viam.proto.rpc.webrtc.signaling.AnswerResponseInitStage
   viam.proto.rpc.webrtc.signaling.AnswerResponseUpdateStage
   viam.proto.rpc.webrtc.signaling.CallRequest
   viam.proto.rpc.webrtc.signaling.CallResponse
   viam.proto.rpc.webrtc.signaling.CallResponseInitStage
   viam.proto.rpc.webrtc.signaling.CallResponseUpdateStage
   viam.proto.rpc.webrtc.signaling.CallUpdateRequest
   viam.proto.rpc.webrtc.signaling.CallUpdateResponse
   viam.proto.rpc.webrtc.signaling.ICECandidate
   viam.proto.rpc.webrtc.signaling.ICEServer
   viam.proto.rpc.webrtc.signaling.OptionalWebRTCConfigRequest
   viam.proto.rpc.webrtc.signaling.OptionalWebRTCConfigResponse
   viam.proto.rpc.webrtc.signaling.WebRTCConfig




.. py:class:: SignalingServiceBase



   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: Call(stream: grpclib.server.Stream[proto.rpc.webrtc.v1.signaling_pb2.CallRequest, proto.rpc.webrtc.v1.signaling_pb2.CallResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: CallUpdate(stream: grpclib.server.Stream[proto.rpc.webrtc.v1.signaling_pb2.CallUpdateRequest, proto.rpc.webrtc.v1.signaling_pb2.CallUpdateResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: Answer(stream: grpclib.server.Stream[proto.rpc.webrtc.v1.signaling_pb2.AnswerResponse, proto.rpc.webrtc.v1.signaling_pb2.AnswerRequest]) -> None
      :abstractmethod:
      :async:


   .. py:method:: OptionalWebRTCConfig(stream: grpclib.server.Stream[proto.rpc.webrtc.v1.signaling_pb2.OptionalWebRTCConfigRequest, proto.rpc.webrtc.v1.signaling_pb2.OptionalWebRTCConfigResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]



.. py:class:: SignalingServiceStub(channel: grpclib.client.Channel)


.. py:class:: AnswerRequest(*, uuid: Text = ..., init: Optional[global___AnswerRequestInitStage] = ..., update: Optional[global___AnswerRequestUpdateStage] = ..., done: Optional[global___AnswerRequestDoneStage] = ..., error: Optional[global___AnswerRequestErrorStage] = ...)



   AnswerRequest is the SDP offer that the controlling side is making via the answering
   stream.

   .. py:attribute:: uuid
      :annotation: :Text

      

   .. py:method:: init() -> global___AnswerRequestInitStage
      :property:


   .. py:method:: update() -> global___AnswerRequestUpdateStage
      :property:


   .. py:method:: done() -> global___AnswerRequestDoneStage
      :property:

      done is sent when the requester is done sending information


   .. py:method:: error() -> global___AnswerRequestErrorStage
      :property:

      error is sent any time before done


   .. py:method:: HasField(field_name: typing_extensions.Literal[done, b'done', error, b'error', init, b'init', stage, b'stage', update, b'update']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.


   .. py:method:: WhichOneof(oneof_group: typing_extensions.Literal[stage, b'stage']) -> Optional[typing_extensions.Literal[init, update, done, error]]

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: AnswerRequestDoneStage



   AnswerRequestDoneStage indicates the controller is done responding with candidates.


.. py:class:: AnswerRequestErrorStage(*, status: Optional[google.rpc.status_pb2.Status] = ...)



   AnswerRequestErrorStage indicates the exchange has failed with an error.

   .. py:method:: status() -> google.rpc.status_pb2.Status
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[status, b'status']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: AnswerRequestInitStage(*, sdp: Text = ..., optional_config: Optional[global___WebRTCConfig] = ...)



   AnswerRequestInitStage is the first and a one time stage that represents the
   callers initial SDP request to the controlled (answerer) side.

   .. py:attribute:: sdp
      :annotation: :Text

      

   .. py:method:: optional_config() -> global___WebRTCConfig
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[optional_config, b'optional_config']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: AnswerRequestUpdateStage(*, candidate: Optional[global___ICECandidate] = ...)



   AnswerRequestUpdateStage is multiply used to trickle in ICE candidates to
   the controlled (answerer) side.

   .. py:method:: candidate() -> global___ICECandidate
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[candidate, b'candidate']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: AnswerResponse(*, uuid: Text = ..., init: Optional[global___AnswerResponseInitStage] = ..., update: Optional[global___AnswerResponseUpdateStage] = ..., done: Optional[global___AnswerResponseDoneStage] = ..., error: Optional[global___AnswerResponseErrorStage] = ...)



   AnswerResponse is the SDP answer that an answerer responds with.

   .. py:attribute:: uuid
      :annotation: :Text

      

   .. py:method:: init() -> global___AnswerResponseInitStage
      :property:


   .. py:method:: update() -> global___AnswerResponseUpdateStage
      :property:


   .. py:method:: done() -> global___AnswerResponseDoneStage
      :property:

      done is sent when the answerer is done sending information


   .. py:method:: error() -> global___AnswerResponseErrorStage
      :property:

      error is sent any time before done


   .. py:method:: HasField(field_name: typing_extensions.Literal[done, b'done', error, b'error', init, b'init', stage, b'stage', update, b'update']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.


   .. py:method:: WhichOneof(oneof_group: typing_extensions.Literal[stage, b'stage']) -> Optional[typing_extensions.Literal[init, update, done, error]]

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: AnswerResponseDoneStage



   AnswerResponseDoneStage indicates the answerer is done responding with candidates.


.. py:class:: AnswerResponseErrorStage(*, status: Optional[google.rpc.status_pb2.Status] = ...)



   AnswerResponseErrorStage indicates the exchange has failed with an error.

   .. py:method:: status() -> google.rpc.status_pb2.Status
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[status, b'status']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: AnswerResponseInitStage(*, sdp: Text = ...)



   AnswerResponseInitStage is the first and a one time stage that represents the
   answerers initial SDP response to the controlling side.

   .. py:attribute:: sdp
      :annotation: :Text

      


.. py:class:: AnswerResponseUpdateStage(*, candidate: Optional[global___ICECandidate] = ...)



   AnswerResponseUpdateStage is multiply used to trickle in ICE candidates to
   the controlling side.

   .. py:method:: candidate() -> global___ICECandidate
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[candidate, b'candidate']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: CallRequest(*, sdp: Text = ..., disable_trickle: bool = ...)



   CallRequest is the SDP offer that the controlling side is making.

   .. py:attribute:: sdp
      :annotation: :Text

      

   .. py:attribute:: disable_trickle
      :annotation: :bool

      when disable_trickle is true, the init stage will be the only stage
      to be received in the response and the caller can expect the SDP
      to contain all ICE candidates.


.. py:class:: CallResponse(*, uuid: Text = ..., init: Optional[global___CallResponseInitStage] = ..., update: Optional[global___CallResponseUpdateStage] = ...)



   CallResponse is the SDP answer that the controlled side responds with.

   .. py:attribute:: uuid
      :annotation: :Text

      

   .. py:method:: init() -> global___CallResponseInitStage
      :property:


   .. py:method:: update() -> global___CallResponseUpdateStage
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[init, b'init', stage, b'stage', update, b'update']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.


   .. py:method:: WhichOneof(oneof_group: typing_extensions.Literal[stage, b'stage']) -> Optional[typing_extensions.Literal[init, update]]

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: CallResponseInitStage(*, sdp: Text = ...)



   CallResponseInitStage is the first and a one time stage that represents
   the initial response to starting a call.

   .. py:attribute:: sdp
      :annotation: :Text

      


.. py:class:: CallResponseUpdateStage(*, candidate: Optional[global___ICECandidate] = ...)



   CallResponseUpdateStage is multiply used to trickle in ICE candidates from
   the controlled (answering) side.

   .. py:method:: candidate() -> global___ICECandidate
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[candidate, b'candidate']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: CallUpdateRequest(*, uuid: Text = ..., candidate: Optional[global___ICECandidate] = ..., done: bool = ..., error: Optional[google.rpc.status_pb2.Status] = ...)



   CallUpdateRequest updates the call with additional info to the controlled side.

   .. py:attribute:: uuid
      :annotation: :Text

      

   .. py:attribute:: done
      :annotation: :bool

      

   .. py:method:: candidate() -> global___ICECandidate
      :property:


   .. py:method:: error() -> google.rpc.status_pb2.Status
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[candidate, b'candidate', done, b'done', error, b'error', update, b'update']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.


   .. py:method:: WhichOneof(oneof_group: typing_extensions.Literal[update, b'update']) -> Optional[typing_extensions.Literal[candidate, done, error]]

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: CallUpdateResponse



   CallUpdateResponse contains nothing in response to a call update.


.. py:class:: ICECandidate(*, candidate: Text = ..., sdp_mid: Optional[Text] = ..., sdpm_line_index: Optional[int] = ..., username_fragment: Optional[Text] = ...)



   ICECandidate represents an ICE candidate.
   From https://github.com/pion/webrtc/blob/5f6baf73255598a7b4a7c9400bb0381acc9aa3dc/icecandidateinit.go

   .. py:attribute:: candidate
      :annotation: :Text

      

   .. py:attribute:: sdp_mid
      :annotation: :Text

      

   .. py:attribute:: sdpm_line_index
      :annotation: :int

      

   .. py:attribute:: username_fragment
      :annotation: :Text

      

   .. py:method:: HasField(field_name: typing_extensions.Literal[_sdp_mid, b'_sdp_mid', _sdpm_line_index, b'_sdpm_line_index', _username_fragment, b'_username_fragment', sdp_mid, b'sdp_mid', sdpm_line_index, b'sdpm_line_index', username_fragment, b'username_fragment']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.


   .. py:method:: WhichOneof(oneof_group: typing_extensions.Literal[_sdp_mid, b'_sdp_mid']) -> Optional[typing_extensions.Literal[sdp_mid]]
               WhichOneof(oneof_group: typing_extensions.Literal[_sdpm_line_index, b'_sdpm_line_index']) -> Optional[typing_extensions.Literal[sdpm_line_index]]
               WhichOneof(oneof_group: typing_extensions.Literal[_username_fragment, b'_username_fragment']) -> Optional[typing_extensions.Literal[username_fragment]]

      Returns the name of the field that is set inside a oneof group.

      If no field is set, returns None.

      :param oneof_group: the name of the oneof group to check.
      :type oneof_group: str

      :returns: The name of the group that is set, or None.
      :rtype: str or None

      :raises ValueError: no group with the given name exists



.. py:class:: ICEServer(*, urls: Optional[Iterable[Text]] = ..., username: Text = ..., credential: Text = ...)



   ICEServer describes an ICE server.

   .. py:attribute:: username
      :annotation: :Text

      

   .. py:attribute:: credential
      :annotation: :Text

      

   .. py:method:: urls() -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[Text]
      :property:



.. py:class:: OptionalWebRTCConfigRequest



   OptionalWebRTCConfigRequest is the request for getting an optional WebRTC config
   to use for the peer connection.


.. py:class:: OptionalWebRTCConfigResponse(*, config: Optional[global___WebRTCConfig] = ...)



   OptionalWebRTCConfigResponse contains the optional WebRTC config
   to use for the peer connection.

   .. py:method:: config() -> global___WebRTCConfig
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[config, b'config']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



.. py:class:: WebRTCConfig(*, additional_ice_servers: Optional[Iterable[global___ICEServer]] = ..., disable_trickle: bool = ...)



   WebRTCConfig represents parts of a WebRTC config.

   .. py:attribute:: disable_trickle
      :annotation: :bool

      disable_trickle indicates if Trickle ICE should be used. Currently, both
      sides must both respect this setting.

   .. py:method:: additional_ice_servers() -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ICEServer]
      :property:



