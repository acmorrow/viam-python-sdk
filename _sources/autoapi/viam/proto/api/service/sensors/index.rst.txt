:py:mod:`viam.proto.api.service.sensors`
========================================

.. py:module:: viam.proto.api.service.sensors

.. autoapi-nested-parse::

   @generated by Viam.
   Do not edit manually!



Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   viam.proto.api.service.sensors.SensorsServiceBase
   viam.proto.api.service.sensors.SensorsServiceStub
   viam.proto.api.service.sensors.GetReadingsRequest
   viam.proto.api.service.sensors.GetReadingsResponse
   viam.proto.api.service.sensors.GetSensorsRequest
   viam.proto.api.service.sensors.GetSensorsResponse
   viam.proto.api.service.sensors.Readings




.. py:class:: SensorsServiceBase



   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: GetSensors(stream: grpclib.server.Stream[proto.api.service.sensors.v1.sensors_pb2.GetSensorsRequest, proto.api.service.sensors.v1.sensors_pb2.GetSensorsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: GetReadings(stream: grpclib.server.Stream[proto.api.service.sensors.v1.sensors_pb2.GetReadingsRequest, proto.api.service.sensors.v1.sensors_pb2.GetReadingsResponse]) -> None
      :abstractmethod:
      :async:


   .. py:method:: __mapping__() -> Dict[str, grpclib.const.Handler]



.. py:class:: SensorsServiceStub(channel: grpclib.client.Channel)


.. py:class:: GetReadingsRequest(*, sensor_names: Optional[Iterable[viam.gen.proto.api.common.v1.common_pb2.ResourceName]] = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:method:: sensor_names() -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[viam.gen.proto.api.common.v1.common_pb2.ResourceName]
      :property:



.. py:class:: GetReadingsResponse(*, readings: Optional[Iterable[global___Readings]] = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:method:: readings() -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Readings]
      :property:



.. py:class:: GetSensorsRequest



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.


.. py:class:: GetSensorsResponse(*, sensor_names: Optional[Iterable[viam.gen.proto.api.common.v1.common_pb2.ResourceName]] = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:method:: sensor_names() -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[viam.gen.proto.api.common.v1.common_pb2.ResourceName]
      :property:



.. py:class:: Readings(*, name: Optional[viam.gen.proto.api.common.v1.common_pb2.ResourceName] = ..., readings: Optional[Mapping[Text, google.protobuf.struct_pb2.Value]] = ...)



   Abstract base class for protocol messages.

   Protocol message classes are almost always generated by the protocol
   compiler.  These generated types subclass Message and implement the methods
   shown below.

   .. py:class:: ReadingsEntry(*, key: Text = ..., value: Optional[google.protobuf.struct_pb2.Value] = ...)



      Abstract base class for protocol messages.

      Protocol message classes are almost always generated by the protocol
      compiler.  These generated types subclass Message and implement the methods
      shown below.

      .. py:attribute:: key
         :annotation: :Text

         

      .. py:method:: value() -> google.protobuf.struct_pb2.Value
         :property:


      .. py:method:: HasField(field_name: typing_extensions.Literal[value, b'value']) -> bool

         Checks if a certain field is set for the message.

         For a oneof group, checks if any field inside is set. Note that if the
         field_name is not defined in the message descriptor, :exc:`ValueError` will
         be raised.

         :param field_name: The name of the field to check for presence.
         :type field_name: str

         :returns: Whether a value has been set for the named field.
         :rtype: bool

         :raises ValueError: if the `field_name` is not a member of this message.



   .. py:method:: name() -> viam.gen.proto.api.common.v1.common_pb2.ResourceName
      :property:


   .. py:method:: readings() -> google.protobuf.internal.containers.MessageMap[Text, google.protobuf.struct_pb2.Value]
      :property:


   .. py:method:: HasField(field_name: typing_extensions.Literal[name, b'name']) -> bool

      Checks if a certain field is set for the message.

      For a oneof group, checks if any field inside is set. Note that if the
      field_name is not defined in the message descriptor, :exc:`ValueError` will
      be raised.

      :param field_name: The name of the field to check for presence.
      :type field_name: str

      :returns: Whether a value has been set for the named field.
      :rtype: bool

      :raises ValueError: if the `field_name` is not a member of this message.



