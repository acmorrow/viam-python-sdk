:py:mod:`viam.services.types`
=============================

.. py:module:: viam.services.types


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.services.types.ServiceType




Attributes
~~~~~~~~~~

.. autoapisummary::

   viam.services.types.Service


.. py:data:: Service
   

   

.. py:class:: ServiceType(name: str, cls: Type[Service])



   Abstract base class for generic types.

   A generic type is typically declared by inheriting from
   this class parameterized with one or more type variables.
   For example, a generic mapping type might be defined as::

     class Mapping(Generic[KT, VT]):
         def __getitem__(self, key: KT) -> VT:
             ...
         # Etc.

   This class can then be used as follows::

     def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
         try:
             return mapping[key]
         except KeyError:
             return default

   .. py:method:: MOTION(cls)
      :property:


   .. py:method:: VISION(cls)
      :property:


   .. py:method:: name(self)
      :property:


   .. py:method:: with_channel(self, channel: grpclib.client.Channel) -> Service



