:py:mod:`viam.services.motion`
==============================

.. py:module:: viam.services.motion


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   viam.services.motion.MotionClient




.. py:class:: MotionClient(channel: grpclib.client.Channel)

   Motion is a Viam service that coordinates motion planning across all of the components in a given robot.

   The motion planning service calculates a valid path that avoids self collision by default. If additional constraints are supplied in the
   `world_state` message, the motion planning service will also account for those.


   .. py:method:: move(self, component_name: viam.proto.api.common.ResourceName, destination: viam.proto.api.common.PoseInFrame, world_state: Optional[viam.proto.api.common.WorldState] = None) -> bool
      :async:

      Move a component on the robot to a given destination, obey any constraints (transforms or obstacles) if supplied in WorldState.

      :param component_name: Name of a component on a given robot.
      :type component_name: ResourceName
      :param destination: The destination to move to, expressed as a `Pose` and the frame in which it was observed.
      :type destination: PoseInFrame
      :param world_state: When supplied, the motion service will create a plan that obeys any contraints expressed in the
                          WorldState message.
      :type world_state: WorldState


   .. py:method:: get_pose(self, component_name: viam.proto.api.common.ResourceName, destination_frame: str) -> viam.proto.api.common.PoseInFrame
      :async:

      Get the Pose and observer frame for any given component on a robot.

      :param component_name: Name of a component on a robot.
      :type component_name: ResourceName
      :param destination_frame: Name of the desired reference frame.
      :type destination_frame: str

      :returns: Pose of the given component and the frame in which it was observed.
      :rtype: `Pose` (PoseInFrame)



